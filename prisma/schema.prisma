datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     Password?
  businessName String?
  phone        String?
  address      String?
  taxInfo      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  clients      Client[]
  transactions Transaction[]
  invoices     Invoice[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Client {
  id           String        @id @default(cuid())
  name         String
  email        String?
  phone        String?
  address      String?
  notes        String?
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoices     Invoice[]
  transactions Transaction[]
}

model Category {
  id           String        @id @default(cuid())
  name         String
  type         String
  transactions Transaction[]
}

model Transaction {
  id            String   @id @default(cuid())
  date          DateTime
  type          String
  amount        Float
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payeePayerId  String?
  payeePayer    Client?  @relation(fields: [payeePayerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentMethod String?
  notes         String?
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Invoice {
  id              String     @id @default(cuid())
  invoiceNumber   String
  dateIssued      DateTime
  dueDate         DateTime
  totalAmount     Float
  paidAmount      Float      @default(0.0)
  status          String
  recurring       Boolean    @default(false)
  nextBillingDate DateTime?
  clientId        String
  client          Client     @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lineItems       LineItem[]
}

model LineItem {
  id          String  @id @default(cuid())
  description String
  quantity    Int
  price       Float
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
