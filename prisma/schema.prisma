datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  password     Password?
  businessName String?
  phone        String?
  address      String?
  taxInfo      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  clients      Client[]
  bills        Bill[]
  invoices     Invoice[]
  vendors      Vendor[]
  merchants    Merchant[]
  expenses     Expense[]
  payments     Payment[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Client {
  id       String    @id @default(cuid())
  name     String
  email    String?
  phone    String?
  address  String?
  notes    String?
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoices Invoice[]
}

model Vendor {
  id      String  @id @default(cuid())
  name    String
  email   String
  phone   String?
  address String?
  website String?
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bills   Bill[]
}

model Category {
  id       String    @id @default(cuid())
  name     String
  type     String
  bills    Bill[]
  expenses Expense[]
}

model Bill {
  id         String     @id @default(cuid())
  date       DateTime
  dueDate    DateTime
  amount     Float
  amountPaid Float      @default(0.0)
  status     String     @default("unpaid")
  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id])
  notes      String?
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId   String
  vendor     Vendor     @relation(fields: [vendorId], references: [id])
  payments   Payment[]
  lineItems  LineItem[]
}

model Invoice {
  id              String     @id @default(cuid())
  invoiceNumber   String
  dateIssued      DateTime
  dueDate         DateTime
  totalAmount     Float
  paidAmount      Float      @default(0.0)
  status          String     @default("unpaid")
  recurring       Boolean    @default(false)
  nextBillingDate DateTime?
  clientId        String
  client          Client     @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lineItems       LineItem[]
  payments        Payment[]
}

model LineItem {
  id          String   @id @default(cuid())
  description String
  quantity    Int
  price       Float
  invoiceId   String?
  invoice     Invoice? @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  billId      String?
  bill        Bill?    @relation(fields: [billId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Expense {
  id         String   @id @default(cuid())
  date       DateTime
  amount     Float
  notes      String?
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Merchant {
  id       String    @id @default(cuid())
  name     String
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expenses Expense[]
}

model Payment {
  id          String   @id @default(cuid())
  amount      Float
  paymentDate DateTime
  method      String
  invoiceId   String?
  invoice     Invoice? @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bill        Bill?    @relation(fields: [billId], references: [id])
  billId      String?
}
